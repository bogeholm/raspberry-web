# This file is a template, and might need editing before it works on your project.
# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/rust/tags/
# image: "rust:latest"

# Optional: Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: http://docs.gitlab.com/ce/ci/docker/using_docker_images.html#what-is-a-service
#services:
#  - mysql:latest
#  - redis:latest
#  - postgres:latest

# Optional: Install a C compiler, cmake and git into the container.
# You will often need this when you (or any of your dependencies) depends on C code.
#before_script:
#- apt-get update -yqq
#- apt-get install -yqq --no-install-recommends build-essential

# Use cargo to test the project
test:cargo_x86_64:
  image: "rust:latest"
  script:
  - rustc --version && cargo --version              # Print version info for debugging
  - cargo test --all --verbose                      # Not single threaded since this is running on x86_64
  #- cargo test --all --verbose -- --test-threads=1  # single threaded since we will use Gpio::new() in integration tests

build:arm:
  image: "rust:latest"
  before_script:
    - apt-get update -yqq
    - dpkg --add-architecture armhf
    - apt-get install -yqq build-essential gcc-arm-linux-gnueabihf libsqlite3-dev:armhf
    - rustup target add armv7-unknown-linux-gnueabihf
  script:
    - RUSTFLAGS="-C linker=arm-linux-gnueabihf-gcc" cargo build --target=armv7-unknown-linux-gnueabihf
